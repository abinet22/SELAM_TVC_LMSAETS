const express = require('express');
const router = express.Router();

const db = require('../models');
const LevelBasedTraining = db.levelbasedtraining;
const NGOBasedTraining = db.ngobasedtraining;
const IndustryBasedTraining = db.industrybasedtraining;
const FunderInfo = db.funderinfo;
const Department = db.departments;
const Course = db.courses;
const Company = db.companies;
const User = db.users;
const LevelBasedProgress = db.levelbasedprogresses;
const LevelBasedTrainee = db.levelbasedtrainees;
const StudentMarkListLevelBased = db.studentmarklistlevelbaseds;
const sequelize = db.sequelize ;
const Occupation  = db.occupations;
const { Op } = require("sequelize");
const bcrypt = require('bcryptjs');
const passport = require('passport');
const { v4: uuidv4 } = require('uuid');
const uploadFile = require('../middleware/upload.js');
const { ensureAuthenticated, forwardAuthenticated } = require('../config/auth');

router.get('/manageevaluation',ensureAuthenticated,async function(req,res){
    const [ngobased, metangobaseddata] = await sequelize.query(
        "SELECT * FROM ngobasedprograms INNER JOIN batches ON batches.batch_id = ngobasedprograms.batch_id"
      );
      const [levelbased, metalevelbaseddata] = await sequelize.query(
        "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
      );
      const [industrybased, metaindustrybaseddata] = await sequelize.query(
        "SELECT * FROM industrybasedprograms INNER JOIN batches ON batches.batch_id = industrybasedprograms.batch_id"
      );
      const department = await Occupation.findAll({});
        res.render('searchevaluation',{
        levelbased:levelbased,
        ngobased:ngobased,
        industrybased:industrybased,
        department:department
    });
});
router.get('/manageprogress',ensureAuthenticated,async function(req,res){
  const [ngobased, metangobaseddata] = await sequelize.query(
      "SELECT * FROM ngobasedprograms INNER JOIN batches ON batches.batch_id = ngobasedprograms.batch_id"
    );
    const [levelbased, metalevelbaseddata] = await sequelize.query(
      "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
    );
    const [industrybased, metaindustrybaseddata] = await sequelize.query(
      "SELECT * FROM industrybasedprograms INNER JOIN batches ON batches.batch_id = industrybasedprograms.batch_id"
    );
    const department = await Occupation.findAll({});
      res.render('searchprogress',{
      levelbased:levelbased,
      ngobased:ngobased,
      industrybased:industrybased,
      department:department
  });
});


router.get('/generateandsubmitgrade',ensureAuthenticated,async function(req,res){
  const [ngobased, metangobaseddata] = await sequelize.query(
    "SELECT * FROM ngobasedprograms INNER JOIN batches ON batches.batch_id = ngobasedprograms.batch_id"
  );
  const [levelbased, metalevelbaseddata] = await sequelize.query(
    "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
  );
  const [industrybased, metaindustrybaseddata] = await sequelize.query(
    "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
  );
  const department = await Department.findAll({});
    res.render('searchforgrading',{
    levelbased:levelbased,
    ngobased:ngobased,
    industrybased:industrybased,
    department:department
});
})


router.post('/findmyclasstoevaluatecourselevel',ensureAuthenticated,async function(req,res){
    const{batchid,level, dpt,showtype} = req.body;
   
    const [results, metadata] = await sequelize.query(
          "SELECT courseteacherclasses.class_id,classindepts.class_name, batches.batch_name,"+
" occupations.occupation_name,courseteacherclasses.program_type, "+
    " courseteacherclasses.level" +
    " FROM courseteacherclasses INNER JOIN classindepts ON classindepts.class_id = courseteacherclasses.class_id"+
" inner join occupations on occupations.occupation_id=classindepts.department_id  "+
      " innerconst express = require('express');
const router = express.Router();

const db = require('../models');
const LevelBasedTraining = db.levelbasedtraining;
const NGOBasedTraining = db.ngobasedtraining;
const IndustryBasedTraining = db.industrybasedtraining;
const FunderInfo = db.funderinfo;
const Department = db.departments;
const Course = db.courses;
const Company = db.companies;
const User = db.users;
const LevelBasedProgress = db.levelbasedprogresses;
const LevelBasedTrainee = db.levelbasedtrainees;
const StudentMarkListLevelBased = db.studentmarklistlevelbaseds;
const sequelize = db.sequelize ;
const Occupation  = db.occupations;
const { Op } = require("sequelize");
const bcrypt = require('bcryptjs');
const passport = require('passport');
const { v4: uuidv4 } = require('uuid');
const uploadFile = require('../middleware/upload.js');
const { ensureAuthenticated, forwardAuthenticated } = require('../config/auth');

router.get('/manageevaluation',ensureAuthenticated,async function(req,res){
    const [ngobased, metangobaseddata] = await sequelize.query(
        "SELECT * FROM ngobasedprograms INNER JOIN batches ON batches.batch_id = ngobasedprograms.batch_id"
      );
      const [levelbased, metalevelbaseddata] = await sequelize.query(
        "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
      );
      const [industrybased, metaindustrybaseddata] = await sequelize.query(
        "SELECT * FROM industrybasedprograms INNER JOIN batches ON batches.batch_id = industrybasedprograms.batch_id"
      );
      const department = await Occupation.findAll({});
        res.render('searchevaluation',{
        levelbased:levelbased,
        ngobased:ngobased,
        industrybased:industrybased,
        department:department
    });
});
router.get('/manageprogress',ensureAuthenticated,async function(req,res){
  const [ngobased, metangobaseddata] = await sequelize.query(
      "SELECT * FROM ngobasedprograms INNER JOIN batches ON batches.batch_id = ngobasedprograms.batch_id"
    );
    const [levelbased, metalevelbaseddata] = await sequelize.query(
      "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
    );
    const [industrybased, metaindustrybaseddata] = await sequelize.query(
      "SELECT * FROM industrybasedprograms INNER JOIN batches ON batches.batch_id = industrybasedprograms.batch_id"
    );
    const department = await Occupation.findAll({});
      res.render('searchprogress',{
      levelbased:levelbased,
      ngobased:ngobased,
      industrybased:industrybased,
      department:department
  });
});


router.get('/generateandsubmitgrade',ensureAuthenticated,async function(req,res){
  const [ngobased, metangobaseddata] = await sequelize.query(
    "SELECT * FROM ngobasedprograms INNER JOIN batches ON batches.batch_id = ngobasedprograms.batch_id"
  );
  const [levelbased, metalevelbaseddata] = await sequelize.query(
    "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
  );
  const [industrybased, metaindustrybaseddata] = await sequelize.query(
    "SELECT * FROM levelbasedprograms INNER JOIN batches ON batches.batch_id = levelbasedprograms.batch_id"
  );
  const department = await Department.findAll({});
    res.render('searchforgrading',{
    levelbased:levelbased,
    ngobased:ngobased,
    industrybased:industrybased,
    department:department
});
})


router.post('/findmyclasstoevaluatecourselevel',ensureAuthenticated,async function(req,res){
    const{batchid,level, dpt,showtype} = req.body;
   
    const [results, metadata] = await sequelize.query(
          "SELECT courseteacherclasses.class_id,classindepts.class_name, batches.batch_name,"+
" occupations.occupation_name,courseteacherclasses.program_type, "+
    " courseteacherclasses.level" +
    " FROM courseteacherclasses INNER JOIN classindepts ON classindepts.class_id = courseteacherclasses.class_id"+
" inner join occupations on occupations.occupation_id=classindepts.department_id  "+
      " inner